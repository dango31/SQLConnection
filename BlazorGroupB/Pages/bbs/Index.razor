@page "/"
@using BlazorGroupB.Data
@using BlazorGroupB.Data.DAO;
@using BlazorGroupB.Models
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using Npgsql
@using System.Data
@using System.Diagnostics
@inject BlazorGroupBDbContext _contextThread
@inject NavigationManager NaviManager

<div class="banner">
    <div class="channel-name text-center" style="font-size: 50px;">
        @ChannelName <!-- チャンネル名を表示 -->
    </div>
</div>

<div class="buttons">
    <button @onclick="DoFortuneTelling" class="buttons special" style="font-size: 16px; width: 100px; padding: 15px 30px;">占い</button>
    <button @onclick="ReloadPage" style="font-size: 16px; width: 170px; padding: 15px 30px;">再読み込み</button>
</div>

<div class="search">
    <button @onclick="NewThread" style="font-size: 16px; width: 250px; padding: 15px 30px;">新規スレッド投稿</button>
    <!-- 検索用の入力欄 -->
    <input type="text" @bind="searchString" placeholder="検索">
    <!-- 検索ボタン -->
    <button @onclick="SelectSearch" class="button">検索</button>
</div>


<!-- メッセージ一覧 -->
@if (Ths != null && !searchbool)
{
    @foreach (var th in Ths)
    {
        
        <div class="message-container border rounded p-3 mt-3">
            <a href="/ThreadPage/@th.ThreadID">
            <div class="d-flex justify-content-between">
                <div>@th.ThreadName</div>
                <div>@th.ThreadID</div>
            </div>
            </a>
        </div>
    }
}
else if (searchbool)
{
    @foreach (var th in afterSearch)
    {

        <div class="message-container border rounded p-3 mt-3">
            <a href="/ThreadPage/@th.ThreadID">
                <div class="d-flex justify-content-between">
                    <div>@th.ThreadName</div>
                    <div>@th.ThreadID</div>
                </div>
            </a>
        </div>
    }
}
else
{
    <div class="text-primary mt-3">No Data...</div>
}

@code {
    //  スレッド一覧のデータを保持するList
    private List<Threads> Ths { get; set; }

    //  検索後のスレッド一覧のデータを保持するList
    private List<Threads> afterSearch = new List<Threads>();

    //  検索が行われたのかを判定するbool
    private bool searchbool = false;

    //  検索文字の保持
    string searchString;

    // チャンネル名を保持するプロパティ
    private string ChannelName { get; set; } = "エール第一チャンネル";

    /// <summary>
    /// 開かれたら最初に起動される
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //  データベースからデータを取り出す
        Ths = await _contextThread.Threads.ToListAsync<Threads>();

    }

    /// <summary>
    /// ページの再読み込み
    /// </summary>
    public void ReloadPage()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }

    /// <summary>
    /// 新規スレッド作成ページに移る
    /// </summary>
    public void NewThread()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/CreateThreadPage");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }

    /// <summary>
    /// スレッド一覧からの検索
    /// </summary>
    public void SelectSearch()
    {
        afterSearch = Ths.FindAll(x => x.ThreadName.Contains(searchString));
        searchbool = true;
    }

    /// <summary>
    /// 占いを行う
    /// </summary>
    public void DoFortuneTelling()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/UranaiPage");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }
}
