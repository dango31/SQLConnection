@page "/ThreadPage/{CodeID?}"
@using BlazorGroupB.Data
@using BlazorGroupB.Data.DAO;
@using BlazorGroupB.Models
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using Npgsql
@using System.Data
@using System.Diagnostics
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject BlazorGroupBDbContext _context
@inject NavigationManager NaviManager
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="purple-band d-flex justify-content-between align-items-center">
        <button class="btn btn-primary rounded-pill" @onclick="BackTopPage">トップページへ</button>
        <h2 class="text-white mx-auto">ABCチャンネル</h2>
        <button class="btn btn-primary rounded-pill" @onclick="ReloadPage">再読み込み</button>
    </div>

    <h1 class="mt-4 text-center">Thread Page</h1>

    <!-- スレッドのタイトル -->
    <h3 class="text-center">@th.ThreadName</h3>

    <!-- メッセージ一覧 -->
    @if (Msgs != null && Msgs.Any())
    {
        @foreach (var msg in Msgs)
        {
            <div class="message-container border rounded p-3 mt-3">
                <div class="d-flex justify-content-between">
                    <div>@msg.UserID</div>
                    <div>@msg.PostTime</div>
                </div>
                <div>@msg.DetailMessage</div>
            </div>
        }
    }
    else
    {
        <div class="text-primary mt-3">No Data...</div>
    }

    <!-- コメント入力フォーム -->
    <div class="comment-form mt-5">
        <div class="d-flex flex-wrap align-items-end">
            <div class="flex-grow-1">
                <h4>コメント内容</h4>
                <textarea class="form-control mb-2" @bind="msg.DetailMessage" style="height: 150px; resize: none;" placeholder="コメントを入力してください"></textarea>
            </div>
        </div>
        <div class="d-flex flex-wrap align-items-end">
            <div class="form-group mb-2" style="flex-basis: 150px;">
                <label for="nickname">お名前（ニックネーム）</label>
                <input type="text" class="form-control" @bind="msg.WriteName" id="nickname" placeholder="お名前を入力してください">
            </div>
            <button class="btn btn-primary rounded-pill ml-2 align-self-end" @onclick="Send">送信</button>
        </div>
    </div>
</div>



@* <button class="btn btn-primary" @onclick="BackTopPage">トップページ</button>
<button class="btn btn-primary" @onclick="ReloadPage">再読み込み</button> *@

@* スレッドタイトルの表示 
<h1>@th.ThreadName</h1>


@* メッセージ一覧の表示 
@if (Msgs != null && int.TryParse(CodeID, out int number))
{
    <table class="table">
        <thead>
            <tr>
                <th>MessageID</th>
                <th>WriteName</th>
                <th>本文DetailMessage</th>
                <th>UserID</th>
            </tr>
        </thead>

        <tbody>
            @foreach (Messages item in Msgs)
            {
                <tr>
                     <th>@item.MessageID</th>
                     <th>@item.WriteName</th>
                     <td>@item.DetailMessage</td> 
                     <td>@item.UserID</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="text-primary">No-Data...</div>
}

@* メッセージの入力欄 
<EditForm Model="@msg" OnSubmit="Send">
    <div class="form-group">
        <label asp-for="msg.DetailMessage" class="control-label"></label>
        <input asp-for="msg.DetailMessage" class="form-control" @bind-value=@msg.DetailMessage />
        <label asp-for="msg.WriteName" class="control-label"></label>
        <input asp-for="msg.WriteName" class="form-control" @bind-value=@msg.WriteName />
    </div>
    <button class="btn btn-primary">Message送信</button>
</EditForm> *@


@code {
    //  ページの番号を保持する
    [Parameter]
    public string CodeID { get; set; }

    //  メッセージ一覧を保持する
    private List<Messages> Msgs { get; set; } = new List<Messages>();

    //  新規メッセージを保持する
    Messages msg = new Messages();

    //  このページのスレッド情報を保持する
    Threads th = new Threads();

    //  ユーザー情報を保持する
    Users user = new Users();
    //  UserIDを保持する
    string userdataID = "";

    //  各種Dao。インスタンスは後で行う
    private NpgsqlConnection conn = null;
    private MessagesDao messagesDao;
    private UsersDao usersDao;

    //  追加
    private HubConnection? hubConnection;

    /// <summary>
    /// メッセージの作成
    /// </summary>
    private void PostMessage()
    {
        //  ThreadIDを追加する
        if (int.TryParse(CodeID, out int number))
        {
            msg.ThreadID = number;
        }
        else
        {
            msg.ThreadID = 0;
        }

        //  投稿時間を追加する
        DateTime dt = DateTime.Now;
        msg.PostTime = dt;

        //  メッセージにUserIDを打ち込む
        msg.UserID = userdataID;

        //  メッセージを作成する
        messagesDao.Insert(msg);

        //ReloadPage();
    }

    /// <summary>
    /// 各種Daoのインスタンス
    /// </summary>
    private void daoConnection()
    {
        var builder = new NpgsqlConnectionStringBuilder
            {
                Host = "localhost",
                Database = "test",
                Username = "postgres",
                Password = "postgres"
            };
        conn = new NpgsqlConnection(builder.ConnectionString);
        messagesDao = new MessagesDao(conn);
        usersDao = new UsersDao(conn);
    }
    /// <summary>
    /// トップページに戻る
    /// </summary>
    public void BackTopPage()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }
    /// <summary>
    /// ページの再読み込み
    /// </summary>
    private void ReloadPage()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/ThreadPage/")
            .Append(CodeID);
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }

    /// <summary>
    /// OnInitializedAsyncの後に起動される。UserIDを生成する。
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        daoConnection();
        //  UAをuserに追加する
        var remoteUserAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
        user.UserAgent = remoteUserAgent;
        user.UserCreateDate = DateTime.Now;

        //  Userを作成する
        userdataID = usersDao.Insert(user);

    }

    //追加項目

    /// <summary>
    /// 最初に起動される
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //  ハブコネクションの接続の構築
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NaviManager.ToAbsoluteUri("/chathub"))
            .Build();

        //  受信したデータをメッセージリストに追加している
        //  最後にInvokeAsync(StateHasChanged)を呼び出すことで
        // blazorに通知され、UIが更新される
        hubConnection.On<Messages>("ReceiveMessage", (msg) =>
        {
            Msgs.Add(msg);
            InvokeAsync(StateHasChanged);
        });
        //  データベースから値を取り出す
        if (int.TryParse(CodeID, out int number))
        {
            try
            {
                //  メッセージ一覧を取り出す
                Msgs = await _context.Messages.Where(m => m.ThreadID == number).ToListAsync<Messages>();

                //  スレッドを取り出して一つに入れる
                List<Threads> ths = new List<Threads>();
                ths = await _context.Threads.Where(m => m.ThreadID == number).ToListAsync<Threads>();
                th = ths[0];

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

        }
        else
        {
            Msgs = await _context.Messages.ToListAsync<Messages>();
        }
        await hubConnection.StartAsync();
    }

    /// <summary>
    /// メッセージの送信を行う
    /// </summary>
    /// <returns></returns>
    private async Task Send()
    {
        PostMessage();
        //  Hubに送信します
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", msg);
        }
    }

    //  Sendボタンが有効か無効かの判定
    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    /// <summary>
    /// 不要のリソースを解放し、メモリリークを防ぐために重要らしいです
    /// </summary>
    /// <returns></returns>
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
