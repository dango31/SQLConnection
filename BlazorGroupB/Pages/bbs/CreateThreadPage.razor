@page "/thread/create"
@using BlazorGroupB.Data
@using BlazorGroupB.Data.DAO;
@using BlazorGroupB.Models
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using Npgsql
@using System.Data
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="thread-creation-page">
    <!-- ヘッダー部分 -->
    <div class="purple-band d-flex justify-content-between align-items-center">
        <button class="btn btn-primary rounded-pill" @onclick="GoToHomePage">トップページへ</button>
        <h1 class="text-white mx-auto">ABCチャンネル</h1>
    </div>
    <!-- スレッド作成フォーム -->
    <div class="thread-creation-form">
        <h2>スレッド作成</h2>
        <!-- タイトル入力欄 -->
        <div class="input-group">
            <label for="title">タイトル：</label>
            <input @bind="title" id="title" type="text" maxlength="20" />
        </div>
        <!-- 投稿内容入力欄 -->
        <div class="input-group">
            <label for="content" class="textarea-label">投稿内容：</label>
            <textarea @bind="content" id="content" rows="4"></textarea>
        </div>
        <!-- 名前入力欄 -->
        <div class="input-group">
            <label for="nickname">名前(ニックネーム)：</label>
            <input @bind="nickname" id="nickname" type="text" />
        </div>
        <div class="button-group">
            <!-- 全クリアボタン -->
            <button @onclick="ClearContent" class="clear-button">全クリア</button>
            <!-- スレッド作成ボタン -->
            <button @onclick="CreateThread" class="create-thread-button">スレッド作成</button>
        </div>
    </div>
</div>

@code {
    // プロパティ
    private string title = "";
    private string content = "";
    private string nickname = "";

    //  Usersクラスのインスタンス化
    Users user = new Users();
    //  ユーザーIDの保持
    string userdataID = "";

    //  各種Daoクラス。インスタンスは後で行う
    private NpgsqlConnection conn = null;
    private ThreadsDao threadsDao;
    private MessagesDao messagesDao;
    private UsersDao usersDao;

    /// <summary>
    /// トップページに戻る
    /// </summary>
    private void GoToHomePage()
    {
        NavigationManager.NavigateTo("/");
    }

    /// <summary>
    /// 入力内容をクリアするメソッド
    /// </summary>
    private void ClearContent()
    {
        // タイトル、投稿内容、名前の各入力欄を空にする
        title = "";
        content = "";
        nickname = "";
    }

    /// <summary>
    /// スレッドを作成するメソッド
    /// </summary>
    private void CreateThread()
    {
        // スレッドとメッセージを新規で作成する
        int number = NewThread();
        PostMessage(number);

        // //  そのurlにジャンプする
        string url = "/ThreadPage/" + number.ToString();
        NavigationManager.NavigateTo(url);
    }

    /// <summary>
    /// スレッドを作成する
    /// </summary>
    /// <returns>スレッドID</returns>
    private int NewThread()
    {
        //  作成時刻を追加する
        DateTime dt = DateTime.Now;
        var thread = new Threads { ThreadName = title, ThreadCreateDate = dt, UserID = userdataID };

        //  スレッドを作成する
        int number = threadsDao.Insert(thread);

        return number;
    }

    /// <summary>
    /// メッセージを作成する
    /// </summary>
    /// <param name="number">スレッドID</param>
    private void PostMessage(int number)
    {
        //  メッセージを作成する
        DateTime dt = DateTime.Now;
        var message = new Messages { ThreadID = number, WriteName = nickname, DetailMessage = content, PostTime = dt, UserID = userdataID };
        messagesDao.Insert(message);
    }

    /// <summary>
    /// 最初に起動される
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //  各種Daoと接続する
        daoConnection();
    }

    /// <summary>
    /// レンダーが終わった後に起動される（OnInitializedAsyncの後）UserIDを作成する
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //  UAをuserに追加する
        var remoteUserAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
        user.UserAgent = remoteUserAgent;
        user.UserCreateDate = DateTime.Now;

        //  Userを作成する
        userdataID = usersDao.Insert(user);
    }

    /// <summary>
    /// 各種Daoと接続する
    /// </summary>
    private void daoConnection()
    {

        var builder = new NpgsqlConnectionStringBuilder
            {
                Host = "localhost",
                Database = "test",
                Username = "postgres",
                Password = "postgres"
            };

        conn = new NpgsqlConnection(
        builder.ConnectionString);

        threadsDao = new ThreadsDao(conn);
        messagesDao = new MessagesDao(conn);
        usersDao = new UsersDao(conn);

    }
}