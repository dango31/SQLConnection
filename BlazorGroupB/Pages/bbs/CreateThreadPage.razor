@page "/CreateThreadPage"
@using BlazorGroupB.Data
@using BlazorGroupB.Data.DAO;
@using BlazorGroupB.Data.Utility;
@using BlazorGroupB.Models
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using Npgsql
@using System.Data
@using System.Diagnostics
@inject NavigationManager NaviManager
@inject IJSRuntime JSRuntime

<button class="btn btn-primary" @onclick="BackTopPage">トップページ</button>

<h1>クリエイトスレッドページ</h1>

<div class="thread-creation-page">
    <!-- ヘッダー部分 -->
    <div class="purple-band d-flex justify-content-between align-items-center">
        <button class="btn btn-primary rounded-pill" @onclick="BackTopPage">トップページへ</button>
        <h1 class="text-white mx-auto">ABCチャンネル</h1>
    </div>
    <!-- スレッド作成フォーム -->
    <div class="thread-creation-form">
        <h2>スレッド作成</h2>
        <!-- タイトル入力欄 -->
        <div class="input-group">
            <label for="title">タイトル：</label>
            <input @bind="title" id="title" type="text" maxlength="100" />
        </div>
        <!-- 投稿内容入力欄 -->
        <div class="input-group">
            <label for="content" class="textarea-label">投稿内容：</label>
            <textarea @bind="content" id="content" rows="4" maxlength="300"></textarea>
        </div>
        <!-- 名前入力欄 -->
        <div class="input-group">
            <label for="nickname">名前(ニックネーム)：</label>
            <input @bind="nickname" id="nickname" type="text" maxlength="30" />
        </div>
        <div class="button-group">
            <!-- 全クリアボタン -->
            <button @onclick="ClearContent" class="clear-button">全クリア</button>
            <!-- スレッド作成ボタン -->
            <button @onclick="OnCreateThread" class="create-thread-button">スレッド作成</button>
        </div>
    </div>
</div>

@code {

    private string title = null;
    private string content = null;
    private string nickname = null;

    //  ユーザーIDの保持
    string userdataID = "";

    private Common common = new Common();

    /// <summary>
    /// スレッドとメッセージの書き込み
    /// </summary>
    private void OnCreateThread()
    {
        try
        {
            if (title?.Length > 100 || title == null)
            {
                Alert("タイトルは100文字以下にして入力してください");
                return;
            }

            if (content?.Length > 300 || content == null)
            {
                Alert("投稿内容は300文字以下にして入力してください");
                return;
            }
            if (nickname?.Length > 30)
            {
                Alert("ニックネームは30文字以下にして入力してください");
                return;

            }
        }
        catch
        {
            NaviManager.NavigateTo("/Error", forceLoad: true);
        }

        //  インスタンス化
        Threads th = new Threads();
        Messages msg = new Messages();

        //  クラスに値を入れ込む
        th.ThreadName = title;
        msg.WriteName = nickname ?? "名無し";
        msg.DetailMessage = content;

        try
        {
            //  スレッドとメッセージを新規で作成する
            int number = common.NewThread(th, userdataID);
            common.PostMessage(msg, number, userdataID);

            //  そのurlにジャンプする
            string url = "/ThreadPage/" + number.ToString();
            NaviManager.NavigateTo(url);
        }
        catch
        {
            NaviManager.NavigateTo("/Error", forceLoad: true);
        }
    }

    /// <summary>
    /// 最初に起動される
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {

    }

    /// <summary>
    /// レンダーが終わった後に起動される（OnInitializedAsyncの後）UserIDを作成する
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            try
            {
                //UAをuserに追加する
                var remoteUserAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");

                //  Userを作成する
                userdataID = common.CreateUserID(remoteUserAgent);
            }
            catch (Exception ex)
            {
                NaviManager.NavigateTo("/Error", forceLoad: true);

            }
        }

    }

    /// <summary>
    /// トップページに戻る
    /// </summary>
    private void BackTopPage()
    {
        try
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("/");
            NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
        }
        catch
        {
            NaviManager.NavigateTo("/Error", forceLoad: true);
        }

    }

    /// <summary>
    /// 書き込み内容を全てクリアする
    /// </summary>
    private void ClearContent()
    {
        // タイトル、投稿内容、名前の各入力欄を空にする
        title = "";
        content = "";
        nickname = "";
    }

    /// <summary>
    /// エラーメッセージの表示
    /// </summary>
    /// <param name="message"></param>
    /// <returns></returns>
    public async Task Alert(string message)
    {
        try
        {
            await JSRuntime.InvokeAsync<string>("messageBox", message);
        }
        catch
        {
            NaviManager.NavigateTo("/Error", forceLoad: true);
        }

    }
}
